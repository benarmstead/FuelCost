# This is a basic workflow to help you get started with Actions
name: CD

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    tags:
      - 'test'
jobs:
  build:
    name: Build APK
    runs-on: ${{ matrix.os }}
    env:
      PUBLISH_DIR: publish
    
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11]
        #windows-2019,
        mode: [release]
        include:
          - os: ubuntu-20.04
            subcommand: linux
            setup_desktop_script: .github/scripts/setup_on_linux.sh
            prepare_to_pack_script: .github/scripts/prepare_to_pack_for_linux.sh
            distribution_path: build/linux/x64/release
          #- os: windows-2019
          #  subcommand: windows
          #  setup_desktop_script: .github/scripts/setup_on_windows.sh
          #  prepare_to_pack_script: .github/scripts/prepare_to_pack_for_windows.sh
          #  distribution_path: build/windows/runner/Release
          - os: macos-11
            subcommand: macos
            setup_desktop_script: .github/scripts/setup_on_macos.sh
            prepare_to_pack_script: .github/scripts/prepare_to_pack_for_macos.sh
            distribution_path: build/macos/Build/Products/release
            
    steps:
      - uses: actions/checkout@v1
      - name: Setup Java
        if: runner.os == 'Linux'
        uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - name: Setup Flutter
        if: runner.os == 'Linux'
        uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      - name: Pub Get Packages
        if: runner.os == 'Linux'
        run: flutter pub get

      - name: Build APK
        if: runner.os == 'Linux'
        run: flutter build apk --split-per-abi --release

      - name: Build APPBUNDLE
        if: runner.os == 'Linux'
        run: flutter build appbundle --release
        
      - name: Sign APKs
        if: runner.os == 'Linux'
        env:
          # If you want to generate a keystore secret, run these commands:
          # keytool -genkey -v -keystore apksign.keystore -alias apksign -keyalg RSA -keysize 4096
          # cat apksign.keystore | base64
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASS: ${{ secrets.KEYSTORE_PASS }}
        run: |
          echo "${KEYSTORE_BASE64}" | base64 -d > apksign.keystore
          for apk in build/app/outputs/apk/release/*.apk; do
          ${ANDROID_HOME}/build-tools/30.0.2/apksigner sign --ks apksign.keystore --ks-pass env:KEYSTORE_PASS --out "FuelCost.apk" "${apk}"
          echo "$(sha256sum FuelCost.apk)"
          done
          rm apksign.keystore
          
      - name: Create Github Release
        if: runner.os == 'Linux'
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/apk/release/*.apk"
          token: ${{ secrets.GITHUB_TOKEN }}
          
## Desktop begins
          
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
      - name: setup flutter channel
        run: .github/scripts/setup_flutter_channel.sh
      - name: setup flutter desktop
        shell: bash
        run: ${{ matrix.setup_desktop_script }}
      - name: doctor
        run: flutter doctor -v
      - name: install dependencies
        run: flutter pub get
      - name: build
        run: flutter build ${{ matrix.subcommand }} --${{ matrix.mode }}
      - name: prepare to pack
        shell: bash
        run: ${{ matrix.prepare_to_pack_script }}

      - name: output build info
        shell: bash
        run: .github/scripts/output_build_info.sh ${{ matrix.distribution_path }}

      - name: compress files (Windows)
        if: runner.os == 'Windows'
        run: |-
          mkdir -p ${{ env.PUBLISH_DIR }}
          cd ${{ matrix.distribution_path }}
          powershell Compress-Archive -Path ./* -DestinationPath $Env:GITHUB_WORKSPACE/${{ env.PUBLISH_DIR }}/FuelCost-${{ runner.os }}.zip
      - name: compress files (macOS, Linux)
        if: runner.os == 'macOS' || runner.os == 'Linux'
        run: |-
          mkdir -p ${{ env.PUBLISH_DIR }}
          cd ${{ matrix.distribution_path }}
          zip -r $GITHUB_WORKSPACE/${{ env.PUBLISH_DIR }}/FuelCost-${{ runner.os }}.zip .
      - uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: false
          tag_name: ${{ github.event.inputs.tag }}
          files: ${{ env.PUBLISH_DIR }}/FuelCost-${{ runner.os }}.zip
